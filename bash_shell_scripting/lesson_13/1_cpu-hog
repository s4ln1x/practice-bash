#!/bin/bash

# For this file we need to analyze how to improve the script

# Script that monitors the top-active process. The script sends an email to the user root if
# utilization of the top active process goes beyond 80%. Of course, this script can be tuned to
# do anything else in such a case.
#
# Start the script, and it will run forever.

while true
do
	# Check every 60 seconds if we have a process causing high CPU load
	sleep 6
  PINFO=( $(ps -eo pcpu,pid -o comm= | sort -k1 -n -r | head -1) )
  PUSAGE="${PINFO[0]%%.*}"
  PID="${PINFO[1]}"
  PNAME="${PINFO[2]}"

	# Only if we have a high CPU load on one process, run a check within 7 seconds
	# In this check, we should monitor if the process is still that active
	# If that's the case, root gets a message
	if [ $PUSAGE -gt 80 ]
	then
		USAGE1=$PUSAGE
		PID1=$PID
		PNAME1=$PNAME
		sleep 7
#		USAGE2=`ps -eo pcpu,pid -o comm= | sort -k1 -n -r | head -1 | awk '{ print $1 } '`
#		USAGE2=${USAGE2%.*}
#		PID2=`ps -eo pcpu,pid -o comm= | sort -k1 -n -r | head -1 | awk '{print $2 }'`
#		PNAME2=`ps -eo pcpu,pid -o comm= | sort -k1 -n -r | head -1 | awk '{print $3 }'`
    PINFO2=( $(ps -eo pcpu,pid -o comm= | sort -k1 -n -r | head -1) )
    PUSAGE2="${PINFO[0]%%.*}"
    PID2="${PINFO[1]}"
    PNAME2="${PINFO[2]}"
		
		# Now we have variables with the old process information and with the
		# new information

		[ $PUSAGE2 -gt 80 ] && [ $PID1 = $PID2 ] && logger "CPU load of $PNAME is above 80%"
	fi
done
